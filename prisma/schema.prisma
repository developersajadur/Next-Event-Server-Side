generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  address      String?
  bio          String?
  gender       String?
  occupation   String?
  phoneNumber  String   @unique
  profileImage String?
  role         Role     @default(USER)
  isDeleted    Boolean  @default(false)
  isBlocked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events          Event[]       @relation("UserEvents")
  payments        Payment[]
  participants    Participant[]
  sentInvites     Invite[]      @relation("SentInvites") // inviter
  receivedInvites Invite[]      @relation("ReceivedInvites") // invitee
  reviews         Review[]

  @@map("users")
}

model Event {
  id           String        @id @default(uuid())
  slug         String       @unique
  title        String
  description  String
  startDate    DateTime
  availableSit Int
  reseveredSit Int
  endDate      DateTime
  venue        String
  bannerImage  String?
  type         EventType
  eventStatus  EventStatus
  category     Category
  inEventExist Boolean       @default(true)
  isPaid       Boolean
  fee          Decimal
  isDeleted    Boolean       @default(false)
  organizer    User          @relation("UserEvents", fields: [organizerId], references: [id])
  organizerId  String
  participants Participant[]
  invites      Invite[]
  reviews      Review[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("events")
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  eventId         String
  event           Event         @relation(fields: [eventId], references: [id])
  amount          Decimal
  method          PaymentMethod
  status          PaymentStatus @default(Pending)
  transactionId   String?       @unique
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, eventId])
  @@map("payments")
}

model Participant {
  id        String              @id @default(uuid())
  userId    String
  eventId   String
  status    ParticipationStatus @default(PENDING)
  hasPaid   Boolean             @default(false)
  joinedAt  DateTime?
  isDeleted Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("participants")
}

model Invite {
  id               String           @id @default(uuid())
  inviteReceiverId String
  inviteSenderId   String
  eventId          String
  status           InvitationStatus @default(PENDING)
  isDeleted        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  event   Event @relation(fields: [eventId], references: [id])
  inviter User  @relation("SentInvites", fields: [inviteSenderId], references: [id])
  invitee User  @relation("ReceivedInvites", fields: [inviteReceiverId], references: [id])

  @@map("invites")
}

model Review {
  id         String   @id @default(uuid())
  eventId    String
  reviewerId String
  rating     Int
  comment    String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  event    Event @relation(fields: [eventId], references: [id])
  reviewer User  @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

enum Role {
  ADMIN
  USER
}

enum EventStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum PaymentMethod {
  COD
  Online
}

enum Category {
  CONFERENCE
  WORKSHOP
  SEMINAR
  NETWORKING
  PARTY
  CONCERT
  EXHIBITION
  OTHER
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum EventType {
  PUBLIC
  PRIVATE
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
